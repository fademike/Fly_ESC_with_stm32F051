diff --git a/Inc/targets.h b/Inc/targets.h
index dce4b2f..855a15f 100644
--- a/Inc/targets.h
+++ b/Inc/targets.h
@@ -286,7 +286,7 @@
 #define TARGET_VOLTAGE_DIVIDER  110
 #define PA6_VOLTAGE
 //#define USE_SERIAL_TELEMETRY
-#define USE_CRSF_INPUT
+//#define USE_CRSF_INPUT
 #define TARGET_STALL_PROTECTION_INTERVAL 9000
 #endif
 
diff --git a/Mcu/f051/STM32F051K6TX_FLASH.ld b/Mcu/f051/STM32F051K6TX_FLASH.ld
index 7f69003..fb2a9bd 100644
--- a/Mcu/f051/STM32F051K6TX_FLASH.ld
+++ b/Mcu/f051/STM32F051K6TX_FLASH.ld
@@ -23,7 +23,7 @@
  *
  ******************************************************************************
  */
-
+ 
 /* Entry Point */
 ENTRY(Reset_Handler)
 
@@ -37,158 +37,93 @@ _Min_Stack_Size = 0x400 ;	/* required amount of stack */
 
 MEMORY
 {
-  SRAM          (xrw) : ORIGIN = 0x20000000, LENGTH = 192
-  RAM           (xrw) : ORIGIN = 0x200000C0, LENGTH = 8K - 192
-  FLASH_VECTAB  (rx)  : ORIGIN = 0x08001000, LENGTH = 192
-  FLASH_VERSION (rx)  : ORIGIN = 0x080010C0, LENGTH = 14
-  FLASH         (rx)  : ORIGIN = ORIGIN(FLASH_VERSION) + LENGTH(FLASH_VERSION), LENGTH = 27K - 32 - (LENGTH(FLASH_VECTAB) + LENGTH(FLASH_VERSION))
-  FILE_NAME     (rx)  : ORIGIN = 0x08007C00 - 32, LENGTH = 32
-  EEPROM        (rx)  : ORIGIN = 0x08007C00, LENGTH = 1K
+  RAM           (xrw) : ORIGIN = 0x20000000, LENGTH = 8K
+  FLASH         (rx)  : ORIGIN = 0x08000000, LENGTH = 64K
 }
 
 /* Sections */
 SECTIONS
 {
-  /* The startup code into "FLASH" Rom type memory */
-  .isr_vector :
-  {
-    . = ALIGN(4);
-    KEEP(*(.isr_vector)) /* Startup code */
-    . = ALIGN(4);
-  } >FLASH_VECTAB
-
-  /* The firmware version and name - at a fixed address to make it possible to read it from firmware files. */
-  .firmware_version :
-  {
-    . = ALIGN(4);
-	KEEP (*(.firmware_info))
-  } >FLASH_VERSION
-
-  /* The program code and other data into "FLASH" Rom type memory */
-  .text :
-  {
-    . = ALIGN(4);
-    *(.text)           /* .text sections (code) */
-    *(.text*)          /* .text* sections (code) */
-    *(.glue_7)         /* glue arm to thumb code */
-    *(.glue_7t)        /* glue thumb to arm code */
-    *(.eh_frame)
-
-    KEEP (*(.init))
-    KEEP (*(.fini))
-
-    . = ALIGN(4);
-    _etext = .;        /* define a global symbols at end of code */
-  } >FLASH
-  /* Constant data into "FLASH" Rom type memory */
-  .rodata :
-  {
-    . = ALIGN(4);
-    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
-    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
-    . = ALIGN(4);
-  } >FLASH
-
-  .ARM.extab   : { 
-    . = ALIGN(4);
-    *(.ARM.extab* .gnu.linkonce.armextab.*)
-    . = ALIGN(4);
-  } >FLASH
-  
-  .ARM : {
-    . = ALIGN(4);
+    /* for Cortex devices, the beginning of the startup code is stored in the .isr_vector section, which goes to FLASH */
+    .isr_vector :
+    {
+	. = ALIGN(4);
+        KEEP(*(.isr_vector))            /* Startup code */
+	. = ALIGN(4);
+    } >FLASH
+    
+    /* the program code is stored in the .text section, which goes to Flash */
+    .text :
+    {
+	    . = ALIGN(4);
+	    
+        *(.text)                   /* normal code */
+        *(.text.*)                 /* -ffunction-sections code */
+        *(.rodata)                 /* read-only data (constants) */
+        *(.rodata*)                /* -fdata-sections read only data */
+        *(.glue_7)                 /* TBD - needed ? */
+        *(.glue_7t)                /* TBD - needed ? */
+
+	/* Necessary KEEP sections (see http://sourceware.org/ml/newlib/2005/msg00255.html) */
+	KEEP (*(.init))
+	KEEP (*(.fini))
+	
+	    . = ALIGN(4);
+        _etext = .;
+	    /* This is used by the startup in order to initialize the .data section */
+        _sidata = _etext;
+    } >FLASH
+    
+    /* This is the initialized data section
+    The program executes knowing that the data is in the RAM
+    but the loader puts the initial values in the FLASH (inidata).
+    It is one task of the startup to copy the initial values from FLASH to RAM. */
+    .data  : AT ( _sidata )
+    {
+	    . = ALIGN(4);
+        /* This is used by the startup in order to initialize the .data secion */
+        _sdata = . ;
+        _data = . ;
+        
+        *(.data)
+        *(.data.*)
+        *(.RAMtext)
+
+	    . = ALIGN(4);
+	    /* This is used by the startup in order to initialize the .data secion */
+   	    _edata = . ;
+    } >RAM
+    
+    /* This is the uninitialized data section */
+    .bss :
+    {
+	    . = ALIGN(4);
+        /* This is used by the startup in order to initialize the .bss secion */
+        _sbss = .;
+        _bss = .;
+        
+        *(.bss)
+        *(.bss.*) /* patched by elias - allows the use of -fdata-sections */
+        *(COMMON)
+        
+	    . = ALIGN(4);
+	    /* This is used by the startup in order to initialize the .bss secion */
+   	 _ebss = . ;
+    } >RAM
+    
+    PROVIDE ( end = _ebss );
+    PROVIDE ( _end = _ebss );
+    
     __exidx_start = .;
-    *(.ARM.exidx*)
     __exidx_end = .;
-    . = ALIGN(4);
-  } >FLASH
-
-  .preinit_array     :
-  {
-    . = ALIGN(4);
-    PROVIDE_HIDDEN (__preinit_array_start = .);
-    KEEP (*(.preinit_array*))
-    PROVIDE_HIDDEN (__preinit_array_end = .);
-    . = ALIGN(4);
-  } >FLASH
-  
-  .init_array :
-  {
-    . = ALIGN(4);
-    PROVIDE_HIDDEN (__init_array_start = .);
-    KEEP (*(SORT(.init_array.*)))
-    KEEP (*(.init_array*))
-    PROVIDE_HIDDEN (__init_array_end = .);
-    . = ALIGN(4);
-  } >FLASH
-  
-  .fini_array :
-  {
-    . = ALIGN(4);
-    PROVIDE_HIDDEN (__fini_array_start = .);
-    KEEP (*(SORT(.fini_array.*)))
-    KEEP (*(.fini_array*))
-    PROVIDE_HIDDEN (__fini_array_end = .);
-    . = ALIGN(4);
-  } >FLASH
-  /* The file name */
-  .file_name :
-  {
-    . = ALIGN(4);
-	KEEP (*(.file_name))
-  } >FILE_NAME
-
-
-  /* Used by the startup to initialize data */
-  _sidata = LOADADDR(.data);
-
-  /* Initialized data sections into "RAM" Ram type memory */
-  .data : 
-  {
-    . = ALIGN(4);
-    _sdata = .;        /* create a global symbol at data start */
-    *(.data)           /* .data sections */
-    *(.data*)          /* .data* sections */
-
-    . = ALIGN(4);
-    _edata = .;        /* define a global symbol at data end */
     
-  } >RAM AT> FLASH
-
-  /* Uninitialized data section into "RAM" Ram type memory */
-  . = ALIGN(4);
-  .bss :
-  {
-    /* This is used by the startup in order to initialize the .bss section */
-    _sbss = .;         /* define a global symbol at bss start */
-    __bss_start__ = _sbss;
-    *(.bss)
-    *(.bss*)
-    *(COMMON)
-
-    . = ALIGN(4);
-    _ebss = .;         /* define a global symbol at bss end */
-    __bss_end__ = _ebss;
-  } >RAM
-
-  /* User_heap_stack section, used to check that there is enough "RAM" Ram  type memory left */
-  ._user_heap_stack :
-  {
-    . = ALIGN(8);
-    PROVIDE ( end = . );
-    PROVIDE ( _end = . );
-    . = . + _Min_Heap_Size;
-    . = . + _Min_Stack_Size;
-    . = ALIGN(8);
-  } >RAM
-
-  /* Remove information from the compiler libraries */
-  /DISCARD/ :
-  {
-    libc.a ( * )
-    libm.a ( * )
-    libgcc.a ( * )
-  }
-
-  .ARM.attributes 0 : { *(.ARM.attributes) }
+    /* after that it's only debugging information. */
+    
+    /* remove the debugging information from the standard libraries */
+    /DISCARD/ :
+    {
+     libc.a ( * )
+     libm.a ( * )
+     libgcc.a ( * )
+     }
 }
diff --git a/Mcu/f051/Startup/startup_stm32f051k6tx.s b/Mcu/f051/Startup/startup_stm32f051k6tx.s
index 2f56507..33a6f13 100644
--- a/Mcu/f051/Startup/startup_stm32f051k6tx.s
+++ b/Mcu/f051/Startup/startup_stm32f051k6tx.s
@@ -1,12 +1,15 @@
 /**
   ******************************************************************************
-  * @file      startup_stm32f051x8.s
+  * @file      startup_stm32f0xx.s
   * @author    MCD Application Team
-  * @brief     STM32F051x4/STM32F051x6/STM32F051x8 devices vector table for GCC toolchain.
+  * @version   V1.0.0
+  * @date      23-March-2012
+  * @brief     STM32F0xx Devices vector table for Atollic toolchain.
   *            This module performs:
   *                - Set the initial SP
   *                - Set the initial PC == Reset_Handler,
   *                - Set the vector table entries with the exceptions ISR address
+  *                - Configure the clock system
   *                - Branches to main in the C library (which eventually
   *                  calls main()).
   *            After Reset the Cortex-M0 processor is in Thread mode,
@@ -14,13 +17,19 @@
   ******************************************************************************
   * @attention
   *
-  * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
-  * All rights reserved.</center></h2>
+  * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
   *
-  * This software component is licensed by ST under BSD 3-Clause license,
-  * the "License"; You may not use this file except in compliance with the
-  * License. You may obtain a copy of the License at:
-  *                        opensource.org/licenses/BSD-3-Clause
+  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
+  * You may not use this file except in compliance with the License.
+  * You may obtain a copy of the License at:
+  *
+  *        http://www.st.com/software_license_agreement_liberty_v2
+  *
+  * Unless required by applicable law or agreed to in writing, software 
+  * distributed under the License is distributed on an "AS IS" BASIS, 
+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  * See the License for the specific language governing permissions and
+  * limitations under the License.
   *
   ******************************************************************************
   */
@@ -45,6 +54,16 @@ defined in linker script */
 /* end address for the .bss section. defined in linker script */
 .word _ebss
 
+.equ  BootRAM, 0xF108F85F
+/**
+ * @brief  This is the code that gets called when the processor first
+ *          starts execution following a reset event. Only the absolutely
+ *          necessary set is performed, after which the application
+ *          supplied main() routine is called.
+ * @param  None
+ * @retval : None
+*/
+
   .section .text.Reset_Handler
   .weak Reset_Handler
   .type Reset_Handler, %function
@@ -53,43 +72,42 @@ Reset_Handler:
   mov   sp, r0          /* set stack pointer */
 
 /* Copy the data segment initializers from flash to SRAM */
-  ldr r0, =_sdata
-  ldr r1, =_edata
-  ldr r2, =_sidata
-  movs r3, #0
+  movs r1, #0
   b LoopCopyDataInit
 
 CopyDataInit:
-  ldr r4, [r2, r3]
-  str r4, [r0, r3]
-  adds r3, r3, #4
+  ldr r3, =_sidata
+  ldr r3, [r3, r1]
+  str r3, [r0, r1]
+  adds r1, r1, #4
 
 LoopCopyDataInit:
-  adds r4, r0, r3
-  cmp r4, r1
+  ldr r0, =_sdata
+  ldr r3, =_edata
+  adds r2, r0, r1
+  cmp r2, r3
   bcc CopyDataInit
-  
-/* Zero fill the bss segment. */
   ldr r2, =_sbss
-  ldr r4, =_ebss
-  movs r3, #0
   b LoopFillZerobss
-
+/* Zero fill the bss segment. */
 FillZerobss:
+  movs r3, #0
   str  r3, [r2]
   adds r2, r2, #4
 
+
 LoopFillZerobss:
-  cmp r2, r4
+  ldr r3, = _ebss
+  cmp r2, r3
   bcc FillZerobss
 
 /* Call the clock system intitialization function.*/
-  bl  SystemInit
+    bl  SystemInit
 /* Call static constructors */
-  bl __libc_init_array
+    bl __libc_init_array
 /* Call the application's entry point.*/
   bl main
-
+  
 LoopForever:
     b LoopForever
 
@@ -122,54 +140,56 @@ Infinite_Loop:
 
 
 g_pfnVectors:
-  .word  _estack
-  .word  Reset_Handler
-  .word  NMI_Handler
-  .word  HardFault_Handler
-  .word  0
-  .word  0
-  .word  0
-  .word  0
-  .word  0
-  .word  0
-  .word  0
-  .word  SVC_Handler
-  .word  0
-  .word  0
-  .word  PendSV_Handler
-  .word  SysTick_Handler
-  .word  WWDG_IRQHandler                   /* Window WatchDog              */
-  .word  PVD_IRQHandler                    /* PVD through EXTI Line detect */
-  .word  RTC_IRQHandler                    /* RTC through the EXTI line    */
-  .word  FLASH_IRQHandler                  /* FLASH                        */
-  .word  RCC_CRS_IRQHandler                /* RCC and CRS                  */
-  .word  EXTI0_1_IRQHandler                /* EXTI Line 0 and 1            */
-  .word  EXTI2_3_IRQHandler                /* EXTI Line 2 and 3            */
-  .word  EXTI4_15_IRQHandler               /* EXTI Line 4 to 15            */
-  .word  TSC_IRQHandler                    /* TSC                          */
-  .word  DMA1_Channel1_IRQHandler          /* DMA1 Channel 1               */
-  .word  DMA1_Channel2_3_IRQHandler        /* DMA1 Channel 2 and Channel 3 */
-  .word  DMA1_Channel4_5_IRQHandler        /* DMA1 Channel 4 and Channel 5 */
-  .word  ADC1_COMP_IRQHandler              /* ADC1, COMP1 and COMP2         */
-  .word  TIM1_BRK_UP_TRG_COM_IRQHandler    /* TIM1 Break, Update, Trigger and Commutation */
-  .word  TIM1_CC_IRQHandler                /* TIM1 Capture Compare         */
-  .word  TIM2_IRQHandler                   /* TIM2                         */
-  .word  TIM3_IRQHandler                   /* TIM3                         */
-  .word  TIM6_DAC_IRQHandler               /* TIM6 and DAC                 */
-  .word  0                                 /* Reserved                     */
-  .word  TIM14_IRQHandler                  /* TIM14                        */
-  .word  TIM15_IRQHandler                  /* TIM15                        */
-  .word  TIM16_IRQHandler                  /* TIM16                        */
-  .word  TIM17_IRQHandler                  /* TIM17                        */
-  .word  I2C1_IRQHandler                   /* I2C1                         */
-  .word  I2C2_IRQHandler                   /* I2C2                         */
-  .word  SPI1_IRQHandler                   /* SPI1                         */
-  .word  SPI2_IRQHandler                   /* SPI2                         */
-  .word  USART1_IRQHandler                 /* USART1                       */
-  .word  USART2_IRQHandler                 /* USART2                       */
-  .word  0                                 /* Reserved                     */
-  .word  CEC_CAN_IRQHandler                /* CEC and CAN                  */
-  .word  0                                 /* Reserved                     */
+  .word _estack
+  .word Reset_Handler
+  .word NMI_Handler
+  .word HardFault_Handler
+  .word 0
+  .word 0
+  .word 0
+  .word 0
+  .word 0
+  .word 0
+  .word 0
+  .word SVC_Handler
+  .word 0
+  .word 0
+  .word PendSV_Handler
+  .word SysTick_Handler
+  .word WWDG_IRQHandler
+  .word PVD_IRQHandler
+  .word RTC_IRQHandler
+  .word FLASH_IRQHandler
+  .word RCC_IRQHandler
+  .word EXTI0_1_IRQHandler
+  .word EXTI2_3_IRQHandler
+  .word EXTI4_15_IRQHandler
+  .word TS_IRQHandler
+  .word DMA1_Channel1_IRQHandler
+  .word DMA1_Channel2_3_IRQHandler
+  .word DMA1_Channel4_5_IRQHandler
+  .word ADC1_COMP_IRQHandler 
+  .word TIM1_BRK_UP_TRG_COM_IRQHandler
+  .word TIM1_CC_IRQHandler
+  .word TIM2_IRQHandler
+  .word TIM3_IRQHandler
+  .word TIM6_DAC_IRQHandler
+  .word 0  
+  .word TIM14_IRQHandler
+  .word TIM15_IRQHandler
+  .word TIM16_IRQHandler
+  .word TIM17_IRQHandler
+  .word I2C1_IRQHandler
+  .word I2C2_IRQHandler
+  .word SPI1_IRQHandler
+  .word SPI2_IRQHandler
+  .word USART1_IRQHandler
+  .word USART2_IRQHandler
+  .word 0
+  .word CEC_IRQHandler
+  .word 0
+  .word BootRAM          /* @0x108. This is for boot in RAM mode for 
+                            STM32F0xx devices. */
 
 /*******************************************************************************
 *
@@ -179,107 +199,107 @@ g_pfnVectors:
 *
 *******************************************************************************/
 
-  .weak      NMI_Handler
+  .weak NMI_Handler
   .thumb_set NMI_Handler,Default_Handler
 
-  .weak      HardFault_Handler
+  .weak HardFault_Handler
   .thumb_set HardFault_Handler,Default_Handler
 
-  .weak      SVC_Handler
+  .weak SVC_Handler
   .thumb_set SVC_Handler,Default_Handler
 
-  .weak      PendSV_Handler
+  .weak PendSV_Handler
   .thumb_set PendSV_Handler,Default_Handler
 
-  .weak      SysTick_Handler
+  .weak SysTick_Handler
   .thumb_set SysTick_Handler,Default_Handler
 
-  .weak      WWDG_IRQHandler
+  .weak WWDG_IRQHandler
   .thumb_set WWDG_IRQHandler,Default_Handler
 
-  .weak      PVD_IRQHandler
+  .weak PVD_IRQHandler
   .thumb_set PVD_IRQHandler,Default_Handler
-
-  .weak      RTC_IRQHandler
+  
+  .weak RTC_IRQHandler
   .thumb_set RTC_IRQHandler,Default_Handler
-
-  .weak      FLASH_IRQHandler
+  
+  .weak FLASH_IRQHandler
   .thumb_set FLASH_IRQHandler,Default_Handler
-
-  .weak      RCC_CRS_IRQHandler
-  .thumb_set RCC_CRS_IRQHandler,Default_Handler
-
-  .weak      EXTI0_1_IRQHandler
+  
+  .weak RCC_IRQHandler
+  .thumb_set RCC_IRQHandler,Default_Handler
+  
+  .weak EXTI0_1_IRQHandler
   .thumb_set EXTI0_1_IRQHandler,Default_Handler
-
-  .weak      EXTI2_3_IRQHandler
+  
+  .weak EXTI2_3_IRQHandler
   .thumb_set EXTI2_3_IRQHandler,Default_Handler
-
-  .weak      EXTI4_15_IRQHandler
+  
+  .weak EXTI4_15_IRQHandler
   .thumb_set EXTI4_15_IRQHandler,Default_Handler
-
-  .weak      TSC_IRQHandler
-  .thumb_set TSC_IRQHandler,Default_Handler
-
-  .weak      DMA1_Channel1_IRQHandler
+  
+  .weak TS_IRQHandler
+  .thumb_set TS_IRQHandler,Default_Handler
+  
+  .weak DMA1_Channel1_IRQHandler
   .thumb_set DMA1_Channel1_IRQHandler,Default_Handler
-
-  .weak      DMA1_Channel2_3_IRQHandler
+  
+  .weak DMA1_Channel2_3_IRQHandler
   .thumb_set DMA1_Channel2_3_IRQHandler,Default_Handler
-
-  .weak      DMA1_Channel4_5_IRQHandler
+  
+  .weak DMA1_Channel4_5_IRQHandler
   .thumb_set DMA1_Channel4_5_IRQHandler,Default_Handler
-
-  .weak      ADC1_COMP_IRQHandler
+  
+  .weak ADC1_COMP_IRQHandler
   .thumb_set ADC1_COMP_IRQHandler,Default_Handler
-
-  .weak      TIM1_BRK_UP_TRG_COM_IRQHandler
+   
+  .weak TIM1_BRK_UP_TRG_COM_IRQHandler
   .thumb_set TIM1_BRK_UP_TRG_COM_IRQHandler,Default_Handler
-
-  .weak      TIM1_CC_IRQHandler
+  
+  .weak TIM1_CC_IRQHandler
   .thumb_set TIM1_CC_IRQHandler,Default_Handler
-
-  .weak      TIM2_IRQHandler
+  
+  .weak TIM2_IRQHandler
   .thumb_set TIM2_IRQHandler,Default_Handler
-
-  .weak      TIM3_IRQHandler
+  
+  .weak TIM3_IRQHandler
   .thumb_set TIM3_IRQHandler,Default_Handler
-
-  .weak      TIM6_DAC_IRQHandler
+  
+  .weak TIM6_DAC_IRQHandler
   .thumb_set TIM6_DAC_IRQHandler,Default_Handler
-
-  .weak      TIM14_IRQHandler
+  
+  .weak TIM14_IRQHandler
   .thumb_set TIM14_IRQHandler,Default_Handler
-
-  .weak      TIM15_IRQHandler
+  
+  .weak TIM15_IRQHandler
   .thumb_set TIM15_IRQHandler,Default_Handler
-
-  .weak      TIM16_IRQHandler
+  
+  .weak TIM16_IRQHandler
   .thumb_set TIM16_IRQHandler,Default_Handler
-
-  .weak      TIM17_IRQHandler
+  
+  .weak TIM17_IRQHandler
   .thumb_set TIM17_IRQHandler,Default_Handler
-
-  .weak      I2C1_IRQHandler
+  
+  .weak I2C1_IRQHandler
   .thumb_set I2C1_IRQHandler,Default_Handler
-
-  .weak      I2C2_IRQHandler
+  
+  .weak I2C2_IRQHandler
   .thumb_set I2C2_IRQHandler,Default_Handler
-
-  .weak      SPI1_IRQHandler
+  
+  .weak SPI1_IRQHandler
   .thumb_set SPI1_IRQHandler,Default_Handler
-
-  .weak      SPI2_IRQHandler
+  
+  .weak SPI2_IRQHandler
   .thumb_set SPI2_IRQHandler,Default_Handler
-
-  .weak      USART1_IRQHandler
+  
+  .weak USART1_IRQHandler
   .thumb_set USART1_IRQHandler,Default_Handler
-
-  .weak      USART2_IRQHandler
+  
+  .weak USART2_IRQHandler
   .thumb_set USART2_IRQHandler,Default_Handler
-
-  .weak      CEC_CAN_IRQHandler
-  .thumb_set CEC_CAN_IRQHandler,Default_Handler
+  
+  .weak CEC_IRQHandler
+  .thumb_set CEC_IRQHandler,Default_Handler
 
 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 
diff --git a/Src/main.c b/Src/main.c
index 1aa00ad..203c9be 100644
--- a/Src/main.c
+++ b/Src/main.c
@@ -1482,7 +1482,7 @@ if((brushed_duty_cycle > 0) && armed){
 int main(void)
 {
 
- initAfterJump();
+ //initAfterJump();
 
  initCorePeripherals();
 
@@ -1560,17 +1560,18 @@ send_LED_RGB(255,0,0);
 #endif
 
 
-loadEEpromSettings();
+//loadEEpromSettings();
 //  EEPROM_VERSION = *(uint8_t*)(0x08000FFC);
-  if(firmware_info.version_major != eepromBuffer[3] || firmware_info.version_minor != eepromBuffer[4]){
-	  eepromBuffer[3] = firmware_info.version_major;
-	  eepromBuffer[4] = firmware_info.version_minor;
-	  for(int i = 0; i < 12 ; i ++){
-		  eepromBuffer[5+i] = firmware_info.device_name[i];
-	  }
-	  saveEEpromSettings();
-  }
-
+//   if(firmware_info.version_major != eepromBuffer[3] || firmware_info.version_minor != eepromBuffer[4]){
+// 	  eepromBuffer[3] = firmware_info.version_major;
+// 	  eepromBuffer[4] = firmware_info.version_minor;
+// 	  for(int i = 0; i < 12 ; i ++){
+// 		  eepromBuffer[5+i] = firmware_info.device_name[i];
+// 	  }
+// 	  saveEEpromSettings();
+//   }
+// Send_str("4.");
+// 	  delayMillis(1);
   if(use_sin_start){
   min_startup_duty = sin_mode_min_s_d;
   }
diff --git a/f051makefile.mk b/f051makefile.mk
index 569bfff..747059b 100644
--- a/f051makefile.mk
+++ b/f051makefile.mk
@@ -1,10 +1,13 @@
 
-TARGETS_F051 := \
+#TARGETS_F051 := \
 	DAKEFPV_35A_F051 FD6288_F051 MP6531_F051 IFLIGHT_F051 TMOTOR55_F051 TMOTOR45_F051 HGLRC_F051 SISKIN_F051 \
 	DIATONE_F051 MAMBA_F40PRO_F051 MAMBA_F50PRO_F051 MAMBA_F60PRO_F051 \
 	WRAITH32V1_F051 WRAITH32V2_F051 CRTEENSY_HILARIESC_F051 FLYCOLOR_F051 HVFLYCOLOR_F051 AIKONSINGLE_F051 \
 	SKYSTARS_F051 AM32REF_F051 BLPWR_F051 NEUTRONRC_F051 RAZOR32_F051 RHINO80A_F051 REPEAT_DRIVE_F051 FLASHHOBBY_F051\
 
+TARGETS_F051 := \
+	AM32REF_F051\
+
 HAL_FOLDER_F051 := $(HAL_FOLDER)/f051
 
 MCU_F051 := -mcpu=cortex-m0 -mthumb
diff --git a/make/tools.mk b/make/tools.mk
index b1dc456..7682179 100644
--- a/make/tools.mk
+++ b/make/tools.mk
@@ -16,7 +16,7 @@
 # Set up ARM (STM32) SDK
 ARM_SDK_DIR ?= $(TOOLS_DIR)/gcc-arm-none-eabi-10-2020-q4-major
 # Checked below, Should match the output of $(shell arm-none-eabi-gcc -dumpversion)
-GCC_REQUIRED_VERSION ?= 10.2.0
+GCC_REQUIRED_VERSION ?= 10.3.1
 
 .PHONY: arm_sdk_version
 
diff --git a/makefile b/makefile
index 567580f..f85293e 100644
--- a/makefile
+++ b/makefile
@@ -58,7 +58,7 @@ TOOLS_DIR ?= $(ROOT)/tools
 DL_DIR := $(ROOT)/downloads
 
 .PHONY : clean all binary f051 g071 f031
-all : $(TARGETS_F051) $(TARGETS_G071) $(TARGETS_F031)
+all : $(TARGETS_F051)
 f051 : $(TARGETS_F051)
 g071 : $(TARGETS_G071)
 f031 : $(TARGETS_F031)
@@ -70,6 +70,7 @@ binary : $(TARGET_BASENAME).bin
 	@$(ECHO) All done
 
 $(TARGETS_F051) :
+	rm -rf ./obj/*
 	@$(MAKE) -s MCU_TYPE=F051 TARGET=$@ binary
 
 $(TARGETS_G071) :
